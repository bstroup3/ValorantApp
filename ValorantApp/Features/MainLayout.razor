@inherits LayoutComponentBase

<PageTitle>Valorant App</PageTitle>

<MudLayout>
    <MudAppBar Color="Color.Primary">
        <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())"/>
        <MudText Typo="Typo.h5">Valorant App</MudText>
        <MudSpacer/>
        <MudIconButton Icon="@Icons.Material.Filled.Settings" Href="settings" />
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" Variant="@DrawerVariant.Temporary">
        <MudNavMenu>
            <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
            <MudNavLink Href="/aimtrainer" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.LocationSearching">Aim Trainer</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class="mt-2">
        <ErrorBoundary Context="errorContext" @ref="_errorBoundary">
            <ChildContent>
                <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                    <MudPaper Class="pa-4">
                        @Body
                    </MudPaper>
                </MudContainer>
            </ChildContent>
        </ErrorBoundary>
    </MudMainContent>
</MudLayout>

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudSnackbarProvider />

@code 
{
    private bool _isDarkMode;
    private MudThemeProvider? _mudThemeProvider;
    private ErrorBoundary? _errorBoundary;
    private bool _drawerOpen;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _isDarkMode = await _mudThemeProvider!.GetSystemPreference();
        StateHasChanged();
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override void OnParametersSet()
    {
        _errorBoundary?.Recover();
    }
}